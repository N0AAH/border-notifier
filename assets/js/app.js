/* === –ê–≤—Ç–æ–ø–æ—à—É–∫ –ö–ü–ü –∑–∞ –Ω–æ–º–µ—Ä–æ–º ‚Üí –¥–∞–ª—ñ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ —è–∫ —Ä–∞–Ω—ñ—à–µ === */
const PROXY_URL = 'https://gentle-fire-c156.epiktet501.workers.dev';
const DIR = 1, CATEGORY = 1, DAYS = 30;

/* 1) –°–ü–ò–°–û–ö –ö–ü–ü (–ø–æ—Ä—è–¥–æ–∫ –≤–∞–∂–ª–∏–≤–∏–π ‚Äî –ø–µ—Ä—à–∏–π –∑–±—ñ–≥ –≤–∏–≥—Ä–∞—î) */
const CHECKPOINTS = [
  { id: 88, name: '–ì—Ä—É—à—ñ–≤ ‚Äì –ë—É–¥–æ–º—î–∂ (–¥–ª—è –≤–∞–Ω—Ç–∞–∂—ñ–≤–æ–∫ ‚â§ 7,5 —Ç–æ–Ω–Ω)' },
  { id: 6,  name: '–ö—Ä–∞–∫—ñ–≤–µ—Ü—å ‚Äì –ö–æ—Ä—á–æ–≤–∞ (–¥–ª—è –≤–∞–Ω—Ç–∞–∂—ñ–≤–æ–∫ ‚â• 7,5 —Ç–æ–Ω–Ω)' },
  { id: 90, name: '–ö—Ä–∞–∫—ñ–≤–µ—Ü—å ‚Äì –ö–æ—Ä—á–æ–≤–∞ (–¥–ª—è –ø–æ—Ä–æ–∂–Ω—ñ—Ö –≤–∞–Ω—Ç–∞–∂—ñ–≤–æ–∫ ‚â• 7,5 —Ç–æ–Ω–Ω)' },
  { id: 20, name: '–ö—Ä–∞–∫—ñ–≤–µ—Ü—å ‚Äì –ö–æ—Ä—á–æ–≤–∞. –¢–æ–≤–∞—Ä–∏ 1-24 –≥—Ä—É–ø–∏ –£–ö–¢–ó–ï–î (‚â• 7,5 —Ç–æ–Ω–Ω)' },
  { id: 5,  name: '–†–∞–≤–∞-–†—É—Å—å–∫–∞ ‚Äì –•—Ä–µ–±–µ–Ω–Ω–µ (–¥–ª—è –≤–∞–Ω—Ç–∞–∂—ñ–≤–æ–∫ ‚â• 7,5 —Ç–æ–Ω–Ω)' },
  { id: 89, name: '–†–∞–≤–∞-–†—É—Å—å–∫–∞ ‚Äì –•—Ä–µ–±–µ–Ω–Ω–µ (–¥–ª—è –ø–æ—Ä–æ–∂–Ω—ñ—Ö –≤–∞–Ω—Ç–∞–∂—ñ–≤–æ–∫ ‚â• 7,5 —Ç–æ–Ω–Ω)' },
  { id: 19, name: '–†–∞–≤–∞-–†—É—Å—å–∫–∞ ‚Äì –•—Ä–µ–±–µ–Ω–Ω–µ. –¢–æ–≤–∞—Ä–∏ 1-24 –≥—Ä—É–ø–∏ –£–ö–¢–ó–ï–î (‚â• 7,5 —Ç–æ–Ω–Ω)' },
  { id: 84, name: '–°–º—ñ–ª—å–Ω–∏—Ü—è ‚Äì –ö—Ä–æ—Å—å—Ü–µ–Ω–∫–æ (–¥–ª—è –≤–∞–Ω—Ç–∞–∂—ñ–≤–æ–∫ ‚â§ 7,5 —Ç–æ–Ω–Ω)' },
  { id: 98, name: '–£–≥—Ä–∏–Ω—ñ–≤ ‚Äì –î–æ–ª–≥–æ–±–∏—á—É–≤ (–¥–ª—è –≤–∞–Ω—Ç–∞–∂—ñ–≤–æ–∫ ‚â• 3,5 —Ç–æ–Ω–Ω –¥–æ ‚â§ 7,5 —Ç–æ–Ω–Ω)' },
  { id: 31, name: '–£–≥—Ä–∏–Ω—ñ–≤ ‚Äì –î–æ–ª–≥–æ–±–∏—á—É–≤ (–¥–ª—è –ø–æ—Ä–æ–∂–Ω—ñ—Ö –≤–∞–Ω—Ç–∞–∂—ñ–≤–æ–∫ ‚â• 7,5 —Ç–æ–Ω–Ω)' },
  { id: 80, name: '–£—Å—Ç–∏–ª—É–≥ ‚Äì –ó–æ—Å–∏–Ω (–¥–ª—è –≤–∞–Ω—Ç–∞–∂—ñ–≤–æ–∫ ‚â§ 7,5 —Ç–æ–Ω–Ω)' },
  { id: 7,  name: '–£—Å—Ç–∏–ª—É–≥ ‚Äì –ó–æ—Å–∏–Ω (–¥–ª—è –ø–æ—Ä–æ–∂–Ω—ñ—Ö –≤–∞–Ω—Ç–∞–∂—ñ–≤–æ–∫ ‚â• 7,5 —Ç–æ–Ω–Ω)' },
  { id: 8,  name: '–®–µ–≥–∏–Ω—ñ ‚Äì –ú–µ–¥–∏–∫–∞ (–¥–ª—è –≤–∞–Ω—Ç–∞–∂—ñ–≤–æ–∫ ‚â• 7,5 —Ç–æ–Ω–Ω)' },
  { id: 91, name: '–®–µ–≥–∏–Ω—ñ ‚Äì –ú–µ–¥–∏–∫–∞ (–¥–ª—è –ø–æ—Ä–æ–∂–Ω—ñ—Ö –≤–∞–Ω—Ç–∞–∂—ñ–≤–æ–∫ ‚â• 7,5 —Ç–æ–Ω–Ω)' },
  { id: 1,  name: '–Ø–≥–æ–¥–∏–Ω ‚Äì –î–æ—Ä–æ–≥—É—Å—å–∫ (–¥–ª—è –≤–∞–Ω—Ç–∞–∂—ñ–≤–æ–∫ ‚â• 7,5 —Ç–æ–Ω–Ω)' },
  { id: 29, name: '–Ø–≥–æ–¥–∏–Ω ‚Äì –î–æ—Ä–æ–≥—É—Å—å–∫ (–¥–ª—è –ø–æ—Ä–æ–∂–Ω—ñ—Ö –≤–∞–Ω—Ç–∞–∂—ñ–≤–æ–∫ ‚â• 7,5 —Ç–æ–Ω–Ω)' },
  { id: 2,  name: '–Ø–≥–æ–¥–∏–Ω ‚Äì –î–æ—Ä–æ–≥—É—Å—å–∫. –¢–æ–≤–∞—Ä–∏ 1-24 –≥—Ä—É–ø–∏ –£–ö–¢–ó–ï–î (‚â• 7,5 —Ç–æ–Ω–Ω)' },
  { id: 14, name: '–£–∂–≥–æ—Ä–æ–¥ ‚Äì –í–∏—à–Ω—î –ù—î–º–µ—Ü—å–∫–µ (–¥–ª—è –≤–∞–Ω—Ç–∞–∂—ñ–≤–æ–∫ ‚â• 3,5 —Ç–æ–Ω–Ω)' },
  { id: 87, name: '–£–∂–≥–æ—Ä–æ–¥ ‚Äì –í–∏—à–Ω—î –ù—î–º–µ—Ü—å–∫–µ (–¥–ª—è –ø–æ—Ä–æ–∂–Ω—ñ—Ö –≤–∞–Ω—Ç–∞–∂—ñ–≤–æ–∫ > 3,5 —Ç–æ–Ω–Ω)' },
  { id: 17, name: '–ß–æ–ø (–¢–∏—Å–∞) ‚Äì –ó–∞—Ö–æ–Ω—å (–¥–ª—è –≤–∞–Ω—Ç–∞–∂—ñ–≤–æ–∫ ‚â• 3,5 —Ç–æ–Ω–Ω)' },
  { id: 97, name: '–ß–æ–ø (–¢–∏—Å–∞) ‚Äì –ó–∞—Ö–æ–Ω—å (–¥–ª—è –ø–æ—Ä–æ–∂–Ω—ñ—Ö –≤–∞–Ω—Ç–∞–∂—ñ–≤–æ–∫ ‚â• 3,5 —Ç–æ–Ω–Ω)' },
];

/* –°—Ç–∞–Ω */
let loopHandle = null;       // –∑–∞–º—ñ–Ω–∞ setInterval ‚Üí —Å–∞–º–æ–ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫
let lastKeyMap = {};         // –∫–ª—é—á: `${plate}|${cpId}` ‚Üí JSON.stringify({...})
let selectedCheckpointId = null;
let selectedCheckpointName = '';

/* –£—Ç–∏–ª—ñ—Ç–∏ */
const $ = (id) => document.getElementById(id);
const setStatus = (msg, cls='') => { $('status').className = 'muted ' + cls; $('status').textContent = msg; };
const normPlate = (p) => (p || '').replace(/\s+/g, '').toUpperCase();
const sleep = (ms) => new Promise(r => setTimeout(r, ms));

function apiUrl(plate, checkpointId, page=1) {
  const base = `https://back.echerha.gov.ua/api/v4/workload/${DIR}/checkpoints/${checkpointId}/details/${CATEGORY}/${DAYS}`;
  const params = new URLSearchParams({ page, plate_number: plate });
  return `${base}?${params.toString()}`;
}

async function ensurePermissionInteractive() {
  if (!('Notification' in window)) { setStatus('–ë—Ä–∞—É–∑–µ—Ä –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è.', 'err'); return false; }
  if (Notification.permission === 'denied') { setStatus('–°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –∑–∞–±–æ—Ä–æ–Ω–µ–Ω—ñ –¥–ª—è —Ü—å–æ–≥–æ —Å–∞–π—Ç—É.', 'err'); return false; }
  if (Notification.permission === 'default') {
    try { const r = await Notification.requestPermission(); if (r !== 'granted') return false; } catch { return false; }
  }
  return true;
}

const ICON_URL = new URL('assets/img/icon.png', document.baseURI).href;

function notifyPlateTime(plate, eta) {
  const title = '—î–ß–µ—Ä–≥–∞';
  const body  = `üöö ${plate || '‚Äî'}\n‚è∞ ${eta || '‚Äî'}`;
  try {
    const n = new Notification(title, {
      body,
      tag: 'echerha-watch',
      renotify: true,
      icon: ICON_URL
    });
    n.onclick = () => { window.focus(); n.close(); };
  } catch (e) {
    alert(`${title}\n\n${body}`);
  }
}

/* ‚Äî‚Äî‚Äî FETCH –∑ —Ä–µ—Ç—Ä–∞—è–º–∏/–±–µ–∫–æ—Ñ—Ñ–æ–º (403/429) —ñ –∑—Ä–æ–∑—É–º—ñ–ª–∏–º —Ç–µ–∫—Å—Ç–æ–º –ø–æ–º–∏–ª–∫–∏ ‚Äî‚Äî‚Äî */
async function getJSON(url) {
  const full = `${PROXY_URL}?url=${encodeURIComponent(url)}`;
  for (let attempt = 1; attempt <= 3; attempt++) {
    const resp = await fetch(full, { cache:'no-store' });
    const text = await resp.text();
    if (resp.ok) {
      try { return JSON.parse(text); }
      catch { throw new Error('Bad JSON from upstream'); }
    }
    // –ª–æ–≥ –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    console.warn('Upstream error', resp.status, text.slice(0, 300));
    // 429/403 ‚Üí –µ–∫—Å–ø–æ–Ω–µ–Ω—Ü—ñ–π–Ω–∏–π –±–µ–∫–æ—Ñ—Ñ
    if (resp.status === 429 || resp.status === 403) {
      const ra = Number(resp.headers.get('retry-after')) || 0;
      const wait = ra ? ra*1000 : 300*attempt*attempt + Math.floor(Math.random()*400);
      await sleep(wait);
      continue;
    }
    throw new Error(`HTTP ${resp.status} ¬∑ ${text.slice(0, 160)}`);
  }
  throw new Error('Rate-limited (too many retries)');
}

function mapFields(data) {
  const first = data?.data?.[0] || {};
  const cp = data?.checkpoint || {};
  const cpTitle = cp.title;
  return [
    ['–ü—É–Ω–∫—Ç –ø—Ä–æ–ø—É—Å–∫—É', cpTitle],
    ['–ù–æ–º–µ—Ä –∞–≤—Ç–æ', first.plate_number || '‚Äî'],
    ['–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –≤ —á–µ—Ä–∑—ñ', first.confirmed_at || '‚Äî'],
    ['–û—Ä—ñ—î–Ω—Ç–æ–≤–Ω–∏–π —á–∞—Å –∑–∞—ó–∑–¥—É –Ω–∞ –∫–æ—Ä–¥–æ–Ω', first.estimated_time || '‚Äî'],
  ];
}
function renderFields(pairs) {
  const box = $('fields');
  box.innerHTML = '';
  for (const [k,v] of pairs) {
    const row = document.createElement('div');
    row.className = 'frow';
    row.innerHTML = `<div class="k">${k}</div><div class="v mono" title="${String(v ?? '‚Äî')}">${v ?? '‚Äî'}</div>`;
    box.appendChild(row);
  }
}

/* === –ù–û–í–ï: –ø–æ—à—É–∫ –ö–ü–ü –∑–∞ –Ω–æ–º–µ—Ä–æ–º –∑ –ø–∞—É–∑–∞–º–∏ (–∞–Ω—Ç–∏-rate-limit) === */
function isHitForPlate(userPlate, json) {
  const first = json?.data?.[0];
  if (!first?.plate_number) return false;
  return normPlate(first.plate_number) === normPlate(userPlate);
}
async function probeCheckpoint(plate, cpId) {
  try {
    const json = await getJSON(apiUrl(plate, cpId));
    return { ok: isHitForPlate(plate, json), json };
  } catch {
    return { ok: false, json: null };
  }
}
/* –ê–ª–≥–æ—Ä–∏—Ç–º:
   1) —è–∫—â–æ —î –∫–µ—à –¥–ª—è —Ü—å–æ–≥–æ –Ω–æ–º–µ—Ä—É ‚Äî —Å–ø–µ—Ä—à—É –ø—Ä–æ–±—É—î–º–æ –π–æ–≥–æ
   2) —è–∫—â–æ –Ω–µ –∑—ñ–π—à–ª–æ—Å—å ‚Äî —ñ–¥–µ–º–æ –ø–æ—Å–ª—ñ–¥–æ–≤–Ω–æ –ø–æ CHECKPOINTS —ñ–∑ –ø–∞—É–∑–∞–º–∏
*/
async function findCheckpointByPlate(plate) {
  const cachedId = Number(localStorage.getItem('ech_last_cp:' + normPlate(plate)) || 0);
  if (cachedId) {
    setStatus(`–®—É–∫–∞—é –Ω–∞ –∫–µ—à–æ–≤–∞–Ω–æ–º—É –ö–ü–ü (${cachedId})‚Ä¶`);
    const { ok, json } = await probeCheckpoint(plate, cachedId);
    if (ok) return { id: cachedId, name: json?.checkpoint?.title || String(cachedId), json };
  }
  setStatus('–®—É–∫–∞—é –ö–ü–ü –¥–ª—è –Ω–æ–º–µ—Ä–∞‚Ä¶');
  for (const cp of CHECKPOINTS) {
    const { ok, json } = await probeCheckpoint(plate, cp.id);
    if (ok) return { id: cp.id, name: json?.checkpoint?.title || cp.name, json };
    await sleep(120 + Math.random()*200); // 120‚Äì320 –º—Å –ø–∞—É–∑–∞ –º—ñ–∂ –ø—Ä–æ–±–∞–º–∏
  }
  return null;
}

/* ‚Äî‚Äî‚Äî –û—Å–Ω–æ–≤–Ω–∏–π —Ç–∏–∫ ‚Äî —Ç–µ–ø–µ—Ä –∑–Ω–∞—î cpId —ñ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –ø–µ—Ä-–ø–∞—Ä—É –ª—ñ—á–∏–ª—å–Ω–∏–∫ ‚Äî‚Äî‚Äî */
async function tick(plate, cpId) {
  try {
    setStatus('–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è‚Ä¶');
    const json = await getJSON(apiUrl(plate, cpId));
    renderFields(mapFields(json));

    const first = json?.data?.[0] || {};
    const plateNow = first.plate_number || '‚Äî';
    const etaNow   = first.estimated_time || '‚Äî';

    // –°—Ç–∞–±—ñ–ª—å–Ω–∏–π –∫–ª—é—á —Å—Ç–∞–Ω—É (–±–µ–∑ estimated_time)
    const keyNow = JSON.stringify({
      position_number: first.position_number ?? null,
      confirmed_at   : first.confirmed_at ?? null,
    });

    const keyCombo = `${normPlate(plate)}|${String(cpId)}`;
    const lastKey = lastKeyMap[keyCombo] ?? localStorage.getItem('ech_last_key:' + keyCombo) ?? '';
    const changed = !!lastKey && keyNow !== lastKey;

    lastKeyMap[keyCombo] = keyNow;
    localStorage.setItem('ech_last_key:' + keyCombo, keyNow);

    // –õ—ñ—á–∏–ª—å–Ω–∏–∫ –ø—ñ–Ω–≥—ñ–≤ –Ω–∞ –∫–æ–º–±—ñ–Ω–∞—Ü—ñ—é plate|cp
    const counterKey = 'ech_pingCounter:' + keyCombo;
    let pingCounter = Number(localStorage.getItem(counterKey) || 0);
    const pingEvery = Number($('pingEvery').value || '5');
    pingCounter = (pingCounter + 1) % pingEvery;
    localStorage.setItem(counterKey, String(pingCounter));

    const shouldNotify = changed || (pingCounter === 0 && lastKey !== '');

    setStatus(`–û—Å—Ç–∞–Ω–Ω—î –æ–Ω–æ–≤–ª–µ–Ω–Ω—è: ${new Date().toLocaleTimeString()}${shouldNotify ? ' ¬∑ –Ω–æ—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—è' : ''}`, shouldNotify ? 'ok' : '');
    if (shouldNotify) notifyPlateTime(plateNow, etaNow, true);

  } catch (e) {
    console.error(e);
    setStatus(`–ü–æ–º–∏–ª–∫–∞: ${String(e.message || e)}`, 'err');
  }
}

/* ‚Äî‚Äî‚Äî –°–∞–º–æ–ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ –∑ –¥–∂–∏—Ç—Ç–µ—Ä–æ–º ¬±10% –∑–∞–º—ñ—Å—Ç—å setInterval ‚Äî‚Äî‚Äî */
async function loop(plate, cpId) {
  await tick(plate, cpId);
  const base = Number($('interval').value) * 1000;
  const jitter = Math.floor(base * 0.1 * Math.random());
  loopHandle = setTimeout(() => loop(plate, cpId), base + jitter);
}

/* === –°—Ç–∞—Ä—Ç/–°—Ç–æ–ø –∑ –∞–≤—Ç–æ–ø–æ—à—É–∫–æ–º –ö–ü–ü === */
async function startPolling() {
  const plate = $('plate').value.trim();
  if (!plate) { setStatus('–í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä –∞–≤—Ç–æ', 'warn'); return; }
  const ok = await ensurePermissionInteractive(); if (!ok) return;

  // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤–∏–±—ñ—Ä –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
  localStorage.setItem('ech_plate', plate);
  localStorage.setItem('ech_interval', $('interval').value);
  localStorage.setItem('ech_pingEvery', $('pingEvery').value);

  // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –ö–ü–ü
  const found = await findCheckpointByPlate(plate);
  if (!found) { setStatus('–ù–æ–º–µ—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –Ω–∞ –≤–∫–∞–∑–∞–Ω–∏—Ö –ö–ü–ü.', 'warn'); return; }

  selectedCheckpointId = found.id;
  selectedCheckpointName = found.name || String(found.id);
  localStorage.setItem('ech_last_cp:' + normPlate(plate), String(selectedCheckpointId));

  // –°–∫–∏–¥–∞—î–º–æ —Å—Ç–∞–Ω –ª–∏—à–µ –¥–ª—è —Ü—å–æ–≥–æ plate+cp
  const keyCombo = `${normPlate(plate)}|${String(selectedCheckpointId)}`;
  lastKeyMap[keyCombo] = '';
  localStorage.setItem('ech_last_key:' + keyCombo, '');
  localStorage.setItem('ech_pingCounter:' + keyCombo, '0');

  clearTimeout(loopHandle);
  setStatus(`–ó–Ω–∞–π–¥–µ–Ω–æ –ö–ü–ü: ${selectedCheckpointName} (ID ${selectedCheckpointId}). –ü–æ—á–∏–Ω–∞—é –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥‚Ä¶`);
  await loop(plate, selectedCheckpointId);
}
function stopPolling(){
  clearTimeout(loopHandle);
  setStatus('–ó—É–ø–∏–Ω–µ–Ω–æ.', 'warn');
}

/* –ü–æ–¥—ñ—ó UI */
$('start').onclick = startPolling;
$('stop').onclick  = stopPolling;

// —Ç–µ—Å—Ç–æ–≤–∞ –Ω–æ—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—è —É —Ñ—É—Ç–µ—Ä—ñ
const testBtn = document.getElementById('testNotif');
if (testBtn) {
  testBtn.addEventListener('click', async () => {
    const ok = await ensurePermissionInteractive();
    if (!ok) { setStatus('–î–æ–∑–≤–æ–ª—å —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è —É –±—Ä–∞—É–∑–µ—Ä—ñ, —Ç–æ–¥—ñ —Å–ø—Ä–∞—Ü—é—î —Ç–µ—Å—Ç.', 'warn'); return; }
    const now = new Date().toLocaleTimeString();
    notifyPlateTime('ü•≥', `–°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–∞—Ü—é—é—Ç—å!`, true);
    setStatus('–¢–µ—Å—Ç–æ–≤—É –Ω–æ—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—é –ø–æ–∫–∞–∑–∞–Ω–æ.', 'ok');
  });
}

/* –í—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å */
$('plate').value = localStorage.getItem('ech_plate') || '';
$('interval').value = localStorage.getItem('ech_interval') || '180';
$('pingEvery').value = localStorage.getItem('ech_pingEvery') || '5';

/* –ü—ñ–¥–∫–∞–∑–∫–∞ –ø—Ä–æ –¥–æ–∑–≤–æ–ª–∏ */
(function hintPerm(){
  if (!('Notification' in window)) { setStatus('–ë—Ä–∞—É–∑–µ—Ä –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è.', 'err'); return; }
  if (Notification.permission === 'denied') setStatus('–°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –∑–∞–±–æ—Ä–æ–Ω–µ–Ω—ñ –¥–ª—è —Ü—å–æ–≥–æ —Å–∞–π—Ç—É.', 'err');
  if (Notification.permission === 'default') setStatus('–ù–∞—Ç–∏—Å–Ω–∏ ¬´–¢–µ—Å—Ç –Ω–æ—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó¬ª ‚Üí –î–æ–∑–≤–æ–ª–∏—Ç–∏.', 'warn');
})();

document.addEventListener('DOMContentLoaded', () => {
  const helpBtn    = document.getElementById('helpBtn');
  const helpModal  = document.getElementById('helpModal');
  const helpClose  = document.getElementById('helpClose');
  const helpDialog = document.getElementById('helpDialog');

  if (!helpBtn || !helpModal || !helpClose || !helpDialog) {
    console.error('Help modal: elements not found (ids: helpBtn, helpModal, helpClose, helpDialog).');
    return;
  }

  let _prevFocus = null;

  function openHelp(){
    _prevFocus = document.activeElement;
    helpModal.classList.add('open');
    helpModal.removeAttribute('hidden');
    helpBtn.setAttribute('aria-expanded','true');
    helpDialog.focus();
    document.documentElement.style.overflow = 'hidden';
  }

  function closeHelp(){
    helpModal.classList.remove('open');
    helpModal.setAttribute('hidden','');
    helpBtn.setAttribute('aria-expanded','false');
    document.documentElement.style.overflow = '';
    (_prevFocus || helpBtn).focus();
  }

  helpBtn.addEventListener('click', openHelp);
  helpClose.addEventListener('click', closeHelp);
  helpModal.addEventListener('click', (e) => { if (e.target === helpModal) closeHelp(); });
  document.addEventListener('keydown', (e) => {
    if (e.key === 'Escape' && helpModal.classList.contains('open')) closeHelp();
  });
});